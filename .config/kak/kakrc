# general
set-option global grepcmd 'rg --column'
set-option global autoreload yes
set-option global ui_options 'gui_set_font=Ubuntu Mono 12'

colorscheme pop-punk

set-face global CurSearch +u
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:CurSearch }

add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

add-highlighter global/ show-matching
hook global BufCreate .* %[
    add-highlighter buffer/ number-lines -relative -hlcursor -separator ' '
    add-highlighter buffer/ wrap
]

git-update-diff-on-write
add_inactive_client_indicators

# statusline
set-option global modelinefmt '%val{bufname} '
set-option -add global modelinefmt '{comment}%sh{ [ -n "$kak_opt_filetype" ] && printf "($kak_opt_filetype) "}'
set-option -add global modelinefmt '%val{cursor_line}:%val{cursor_char_column} '
set-option -add global modelinefmt '{default}{{context_info}} {{mode_info}} - %val{client}'

# enable editorconfig
hook global BufOpenFile .* %{ editorconfig-load }
hook global BufNewFile .* %{ editorconfig-load }

# switch cursor color in insert mode
set-face global InsertCursor black,blue

hook global ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}

hook global ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}}

# mappings
map global insert <c-w> '<esc>bdi'

map global normal '#' ':comment-line<ret>'
map global normal <esc> ':set-register slash ""<ret>'

map global user -docstring 'find file' f ':find '
map global user -docstring 'grep' g ':grep ""<c-b>'

map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

hook global -always BufOpenFifo '\*grep\*' %{
    map global normal <minus> ':grep-next-match<ret>'
    map global normal <a-minus> ':grep-previous-match<ret>'
}

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

hook global InsertChar k %{ try %{
  exec -draft hH <a-k>jk<ret> d
  exec <esc>
}}

# functions
define-command clippy %{
    kakqt-split-vertical %{ rename-client clippy }
    set-option global toolsclient clippy
    set-option global docsclient clippy
}

define-command ide %{
    evaluate-commands -try-client client0 %{ rename-client main }
    set-option global jumpclient main

    clippy
}

define-command open-project -params 1 %{
    delete-buffers-matching *
    ghq-cd %arg{1}
}
complete-command open-project shell-script-candidates %{ ghq list }

define-command delete-buffers-matching -params 1 %{
    evaluate-commands -buffer * %{
        evaluate-commands %sh{ case "$kak_buffile" in $1) echo "delete-buffer" ;; esac }
    }
}

declare-option -hidden str swap_buffer_target
define-command swap-buffer-with -override -params 1 -client-completion %{
    set-option global swap_buffer_target %val{bufname}
    edit -scratch # release current window for other client
    evaluate-commands -client %arg{1} "
        set-option global swap_buffer_target %%val{bufname}
        buffer %opt{swap_buffer_target}
    "
    delete-buffer # delete the temporary scratch buffer
    buffer %opt{swap_buffer_target}
}

# aliases
alias global s insert-snippet

alias global p open-project
alias global pnew ghq-create
alias global pget ghq-get-and-cd

alias global g git
define-command gst -params .. "git status %arg{@}" -docstring "git status"
define-command glg -params .. "git log  %arg{@}--oneline --decorate --graph" -docstring "git log"
define-command gd -params .. "git diff %arg{@}" -docstring "git diff"

# format
hook global BufSetOption filetype=(c|cpp) %{
    set-option buffer formatcmd 'clang-format'
}

hook global BufSetOption filetype=(javascript|typescript|json) %{
    set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
}

hook global BufSetOption filetype=python %{
    set-option buffer formatcmd "black -"
}

# source kakqt.kak
source "%val{config}/kakoune-qt.kak"
try %{
    require-module kakoune-qt
}

# source plugins
source "%val{config}/plugins.kak"

# Source a local project kak config if it exists
define-command local-config -docstring "edit local config" %{ edit .local.kak }
try %{ source .local.kak }
