# general
set-option global grepcmd 'rg --column'
set-option global autoreload yes
set-option global ui_options 'kakqt_set_font=MonoLisa 11'
set-option global scrolloff 5,5

colorscheme ok
colorscheme one-darker

set-face global CurSearch +u
hook global RegisterModified '/' %{ add-highlighter -override global/search regex "%reg{/}" 0:CurSearch }

add-highlighter global/ regex \b(TODO|FIXME|XXX|NOTE)\b 0:default+rb

add-highlighter global/ show-matching
hook global BufCreate .* %[
    add-highlighter buffer/ number-lines -relative -hlcursor -separator ' '
    add-highlighter buffer/ wrap -indent
]

git-update-diff-on-write
# add_inactive_client_indicators

# statusline
declare-option -hidden str modeline_git_branch
hook global WinDisplay .* %{
  set-option window modeline_git_branch %sh{
    branch=$(git -C "${kak_buffile%/*}" rev-parse --abbrev-ref HEAD 2>/dev/null)
    if [ -n "$branch" ]; then
      printf "$branch "
    fi
  }
}

set-option global modelinefmt '%val{bufname} %opt{modeline_git_branch}'
set-option -add global modelinefmt '{comment}%sh{ [ -n "$kak_opt_filetype" ] && printf "($kak_opt_filetype) "}'
set-option -add global modelinefmt '%val{cursor_line}:%val{cursor_char_column} '
set-option -add global modelinefmt '{default}{{context_info}} {{mode_info}} - %val{client}'

# enable editorconfig and setup tabs/spaces
hook global BufOpenFile .* %{
    editorconfig-load
    autoconfigtab
}
hook global BufNewFile .* %{
    editorconfig-load
    autoconfigtab
}

hook global BufSetOption indentwidth=.* %{
    set-option buffer softtabstop %opt{indentwidth}
}

# switch cursor color in insert mode
set-face global InsertCursor black,blue

hook global ModeChange .*:.*:insert %{
    set-face window PrimaryCursor InsertCursor
    set-face window PrimaryCursorEol InsertCursor
}

hook global ModeChange .*:insert:.* %{ try %{
    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}}

# mappings
map global insert <c-w> '<a-;>h<a-;>B<a-;>d'
# map global insert <c-n> '<a-;>:lsp-snippets-select-next-placeholders<ret>' -docstring 'Select next snippet placeholder'

map global normal '#' ':comment-line<ret>'
map global normal '<a-#>' ':comment-block<ret>'
map global normal <esc> ':set-register slash ""<ret>'

map global user -docstring 'find file' f ':find '
map global user -docstring 'grep' g ':grep ""<c-b>'
map global user -docstring 'Recent buffers list' b ':recent-buffers-pick-link<ret>'

map global normal <c-o> <c-o>vv
map global normal <c-i> <c-i>vv

map global normal J "Jx"
map global normal K "Kx"

map global normal "<a-*>" "*<percent>s<ret>" -docstring "Select all matching in file"

map -docstring "xml tag objet" global object t %{c<lt>([\w.]+)\b[^>]*?(?<lt>!/)>,<lt>/([\w.]+)\b[^>]*?(?<lt>!/)><ret>}

hook global -always BufOpenFifo '\*grep\*' %{
    map global normal <minus> ':grep-next-match<ret>'
    map global normal <a-minus> ':grep-previous-match<ret>'
}

map global normal <a-$> ':prompt -shell-completion echo-pipe: %{ echo %sh{ printf "%s" "$kak_selection" | $kak_text }}<ret>'

# Search case-insensitive by default
map global normal "/" "/(?i)"
map global normal "?" "?(?i)"
map global normal "<a-/>" "<a-/>(?i)"
map global normal "<a-?>" "<a-?>(?i)"

hook global InsertCompletionShow .* %{ map window insert <tab> <c-n>; map window insert <s-tab> <c-p> }
hook global InsertCompletionHide .* %{ unmap window insert <tab> <c-n>; unmap window insert <s-tab> <c-p> }

hook global InsertChar k %{ try %{
    exec -draft hH <a-k>jk<ret> d
    exec <esc>

    unset-face window PrimaryCursor
    unset-face window PrimaryCursorEol
}}

# functions
define-command secondary-client -params .. %{
    try %{
        evaluate-commands -client secondary %{ %arg{@} }
    } catch %{
        evaluate-commands -try-client main %{
            new "rename-client secondary; %arg{@}"
        }
    }
}
complete-command secondary-client command

hook global ClientRenamed .*:secondary %{
    set-option global docsclient secondary
}

define-command helper-client -params .. %{
    try %{
        evaluate-commands -client helper %{ %arg{@} }
    } catch %{
        evaluate-commands -try-client main %{
            kakqt-split-vertical %{ rename-client helper; buffer "*debug*" }
        }
    }
}
complete-command helper-client command

define-command toggle-client -params 1 %{
    evaluate-commands %sh{
        if KAKQT_SESSION_ID=$kak_client_env_KAKQT_SESSION_ID kak-qt --cli get-visible $1 | grep -q 'true'
        then
          echo "kakqt-hide $1"
        else
          echo "kakqt-focus $1"
        fi
    }
}
complete-command toggle-client client

hook global ClientRenamed .*:helper %{
    set-option global toolsclient helper
    map global user t ':toggle-client helper<ret>' -docstring 'toggle helper client'
    hook global WinDisplay '.*' %{
        evaluate-commands -client helper %{ evaluate-commands %sh{
            [ "$kak_buffile" = "$kak_hook_param" ] && echo "kakqt-focus helper"
        }}
    }
    hook global BufOpenFifo '.*' %{
        evaluate-commands -client helper %{ evaluate-commands %sh{
            [ "$kak_buffile" = "$kak_hook_param" ] && echo "kakqt-focus helper"
        }}
    }
}

define-command main-client -params 0..1 %{
    evaluate-commands %sh{
        if [ -z "$1" ]; then
            echo "kakqt-focus main"
        else
            echo "evaluate-commands -client '$1' %{ rename-client main }"
        fi
    }
}
complete-command main-client command

hook -once global ClientCreate client0 %{
    rename-client main
}

hook global ClientRenamed .*:main %{
    set-option global jumpclient 'main'
    evaluate-commands %sh{
        [ -z "${kak_client_env_KAKQT_SESSION_ID}" ] || echo "try %{ evaluate-commands -client helper nop } catch %{ helper-client 'kakqt-hide %val{client}; buffer *debug*' }"
    }

}

hook global FocusIn main %{
    set-option global jumpclient 'main'
}
hook global FocusIn secondary %{
    # TODO Should not happen when secondary has opened e.g. *git*, *man* etc.
    set-option global jumpclient 'secondary'
}

define-command open-project -params 1 %{
    delete-buffers-matching *
    ghq-cd %arg{1}
}
complete-command open-project shell-script-candidates %{ ghq list }

define-command delete-buffers-matching -params 1 %{
    evaluate-commands -buffer * %{
        evaluate-commands %sh{ case "$kak_buffile" in $1) echo "delete-buffer" ;; esac }
    }
}

declare-option -hidden str swap_buffer_target
define-command swap-buffer-with -override -params 1 -client-completion %{
    set-option global swap_buffer_target %val{bufname}
    edit -scratch # release current window for other client
    evaluate-commands -client %arg{1} "
        set-option global swap_buffer_target %%val{bufname}
        buffer %opt{swap_buffer_target}
    "
    delete-buffer # delete the temporary scratch buffer
    buffer %opt{swap_buffer_target}
}

# aliases
alias global s insert-snippet
alias global rf recentf

alias global p open-project
alias global pnew ghq-create
alias global pget ghq-get-and-cd

alias global sec secondary-client
alias global helper helper-client

alias global g git
evaluate-commands %sh{
    cat ~/.config/zsh/aliases.zsh | grep "g[a-z]*='git .*'" -o | tr -d "'" | awk -F'=' '{print "define-command", $1, "-params .. -docstring \"" $2 "\" %{", $2, "}"}'
}

# format
hook global BufSetOption filetype=(c|cpp) %{
    set-option buffer formatcmd 'clang-format'
}

hook global BufSetOption filetype=(javascript|typescript|json) %{
    set-option buffer formatcmd "prettier --stdin-filepath=%val{buffile}"
}

hook global BufSetOption filetype=python %{
    set-option buffer formatcmd "black -"
}

hook global BufSetOption filetype=go %{
    set-option buffer formatcmd "gofmt"
}

# source plugins
source "%val{config}/plugins.kak"

# Source a local project kak config if it exists
define-command local-config -docstring "edit local config" %{ edit .local.kak }
try %{ source .local.kak }
